// Mocks generated by Mockito 5.4.4 from annotations
// in clean_arch/test/presenter/bloc/provider/note_list_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:clean_arch/core/data/dto/note_request_model.dart' as _i8;
import 'package:clean_arch/core/domain/repositories/note_repository_contract.dart'
    as _i2;
import 'package:clean_arch/core/domain/usecases/note_module/delete_note_usecase.dart'
    as _i7;
import 'package:clean_arch/core/domain/usecases/note_module/get_note_usecase.dart'
    as _i4;
import 'package:clean_arch/core/domain/usecases/usecase_contracts.dart' as _i6;
import 'package:clean_arch/network/entities/base_response.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNoteRepositoryContract_0 extends _i1.SmartFake
    implements _i2.NoteRepositoryContract {
  _FakeNoteRepositoryContract_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseResponse_1<T> extends _i1.SmartFake
    implements _i3.BaseResponse<T> {
  _FakeBaseResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetNotes].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNotes extends _i1.Mock implements _i4.GetNotes {
  MockGetNotes() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositoryContract get noteRepository => (super.noSuchMethod(
        Invocation.getter(#noteRepository),
        returnValue: _FakeNoteRepositoryContract_0(
          this,
          Invocation.getter(#noteRepository),
        ),
      ) as _i2.NoteRepositoryContract);

  @override
  _i5.Future<_i3.BaseResponse<dynamic>> call(_i6.NoParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i5.Future<_i3.BaseResponse<dynamic>>.value(
            _FakeBaseResponse_1<dynamic>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<dynamic>>);
}

/// A class which mocks [DeleteNote].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteNote extends _i1.Mock implements _i7.DeleteNote {
  MockDeleteNote() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NoteRepositoryContract get noteRepository => (super.noSuchMethod(
        Invocation.getter(#noteRepository),
        returnValue: _FakeNoteRepositoryContract_0(
          this,
          Invocation.getter(#noteRepository),
        ),
      ) as _i2.NoteRepositoryContract);

  @override
  _i5.Future<_i3.BaseResponse<dynamic>> call(
          _i8.NoteRequestModel? noteRequestModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noteRequestModel],
        ),
        returnValue: _i5.Future<_i3.BaseResponse<dynamic>>.value(
            _FakeBaseResponse_1<dynamic>(
          this,
          Invocation.method(
            #call,
            [noteRequestModel],
          ),
        )),
      ) as _i5.Future<_i3.BaseResponse<dynamic>>);
}
