// Mocks generated by Mockito 5.4.4 from annotations
// in clean_arch/test/presenter/bloc/provider/add_note_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:bloc/bloc.dart' as _i10;
import 'package:clean_arch/core/data/dto/note_model.dart' as _i8;
import 'package:clean_arch/core/domain/repositories/note_repository_contract.dart'
    as _i6;
import 'package:clean_arch/core/domain/usecases/note_module/add_note_usescase.dart'
    as _i11;
import 'package:clean_arch/core/domain/usecases/note_module/delete_note_usecase.dart'
    as _i4;
import 'package:clean_arch/core/domain/usecases/note_module/get_note_usecase.dart'
    as _i3;
import 'package:clean_arch/network/entities/base_response.dart' as _i7;
import 'package:clean_arch/presenter/bloc/provider/note_list_bloc.dart' as _i5;
import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalKey_0<T extends _i1.State<_i1.StatefulWidget>>
    extends _i2.SmartFake implements _i1.GlobalKey<T> {
  _FakeGlobalKey_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeGetNotes_1 extends _i2.SmartFake implements _i3.GetNotes {
  _FakeGetNotes_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeleteNote_2 extends _i2.SmartFake implements _i4.DeleteNote {
  _FakeDeleteNote_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNoteListState_3<T> extends _i2.SmartFake
    implements _i5.NoteListState<T> {
  _FakeNoteListState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNoteRepositoryContract_4 extends _i2.SmartFake
    implements _i6.NoteRepositoryContract {
  _FakeNoteRepositoryContract_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBaseResponse_5<T> extends _i2.SmartFake
    implements _i7.BaseResponse<T> {
  _FakeBaseResponse_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NoteListBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteListBloc extends _i2.Mock implements _i5.NoteListBloc {
  MockNoteListBloc() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.GlobalKey<_i1.AnimatedListState> get listKey => (super.noSuchMethod(
        Invocation.getter(#listKey),
        returnValue: _FakeGlobalKey_0<_i1.AnimatedListState>(
          this,
          Invocation.getter(#listKey),
        ),
      ) as _i1.GlobalKey<_i1.AnimatedListState>);

  @override
  _i3.GetNotes get getNotesUseCase => (super.noSuchMethod(
        Invocation.getter(#getNotesUseCase),
        returnValue: _FakeGetNotes_1(
          this,
          Invocation.getter(#getNotesUseCase),
        ),
      ) as _i3.GetNotes);

  @override
  _i4.DeleteNote get deleteNoteUseCase => (super.noSuchMethod(
        Invocation.getter(#deleteNoteUseCase),
        returnValue: _FakeDeleteNote_2(
          this,
          Invocation.getter(#deleteNoteUseCase),
        ),
      ) as _i4.DeleteNote);

  @override
  List<_i8.NoteModel> get noteList => (super.noSuchMethod(
        Invocation.getter(#noteList),
        returnValue: <_i8.NoteModel>[],
      ) as List<_i8.NoteModel>);

  @override
  set noteList(List<_i8.NoteModel>? _noteList) => super.noSuchMethod(
        Invocation.setter(
          #noteList,
          _noteList,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.NoteListState<dynamic> get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeNoteListState_3<dynamic>(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.NoteListState<dynamic>);

  @override
  _i9.Stream<_i5.NoteListState<dynamic>> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i5.NoteListState<dynamic>>.empty(),
      ) as _i9.Stream<_i5.NoteListState<dynamic>>);

  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);

  @override
  _i9.Future<void> getNoteList(
    _i5.GetNoteListEvent? event,
    _i10.Emitter<_i5.NoteListState<dynamic>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getNoteList,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> addNewNoteExtension(
    _i5.AddNewNoteEvent? event,
    _i10.Emitter<_i5.NoteListState<dynamic>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addNewNoteExtension,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  _i9.Future<void> deleteNote(
    _i5.DeleteNoteEvent? event,
    _i10.Emitter<_i5.NoteListState<dynamic>>? emit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [
            event,
            emit,
          ],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void add(_i5.NoteListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onEvent(_i5.NoteListEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emit(_i5.NoteListState<dynamic>? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void on<E extends _i5.NoteListEvent>(
    _i10.EventHandler<E, _i5.NoteListState<dynamic>>? handler, {
    _i10.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onTransition(
          _i10.Transition<_i5.NoteListEvent, _i5.NoteListState<dynamic>>?
              transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);

  @override
  void onChange(_i10.Change<_i5.NoteListState<dynamic>>? change) =>
      super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AddNote].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddNote extends _i2.Mock implements _i11.AddNote {
  MockAddNote() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i6.NoteRepositoryContract get noteRepository => (super.noSuchMethod(
        Invocation.getter(#noteRepository),
        returnValue: _FakeNoteRepositoryContract_4(
          this,
          Invocation.getter(#noteRepository),
        ),
      ) as _i6.NoteRepositoryContract);

  @override
  _i9.Future<_i7.BaseResponse<dynamic>> call(_i8.NoteModel? noteModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [noteModel],
        ),
        returnValue: _i9.Future<_i7.BaseResponse<dynamic>>.value(
            _FakeBaseResponse_5<dynamic>(
          this,
          Invocation.method(
            #call,
            [noteModel],
          ),
        )),
      ) as _i9.Future<_i7.BaseResponse<dynamic>>);
}
